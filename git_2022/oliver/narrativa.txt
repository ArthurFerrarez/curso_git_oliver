----------------------------------------
NARRATIVA

CURSO DE GIT E GITHUB

O QUE É GIT?
	GIT É UM SISTEMA OPEN SOURCE DE CONTROLE DE VERSÃO. CRIADO POR LINUS TORVALDS.
O QUE ELE FAZ?
	ARMAZENA UM HISTÓRICO DE ALTERAÇÕES NOS CÓDIGOS. PERMITINDO ASSIM A GENTE ACESSAR TODAS AS MODIFICAÇÕES FEITAS.

O QUE É GITHUB?
	GITHUB É UM SERVIÇO DE HOSPEDAGEM DE GIT. O GITHUB ARMAZENA O PROJETO (REPOSITÓRIO) E PERMITE A SINCRONIZAÇÃO COM TODOS OS MEMBROS DA EQUIPE. FACILITANDO ASSIM O COMPARTILHAMENTO DE VERSÕES.
	ALGUNS EXEMPLOS DE HUBS QUE SUPORTAM O GIT PARA ENVIO/RECEBIMENTO DE ARQUIVOS:
	-> GITHUB
	-> GITLAB
	-> BITBUCKET
	-> SOURCEFORGE


-- DEPOIS DE TER O GIT INSTALADO E A CONTA NO GITHUB --
-- ALGUNS HUBS DE GIT PODEM PEDIR A ALTENTICAÇÃO VIA CHAVE SSH. DE FORMA SIMPLES, O OBJETIVO É VALIDAR O USUÁRIO DO GIT E O HUB ESCOLHIDO. A FORMA COMO FAZER ESSA CONFIGURAÇÃO IRÁ VARIAR SEMPRE DE HUB PARA HUB.
===========================================================================================
===========================================================================================
-- CONFIGURANDO O AMBIENTE

// O PRIMEIRO COMANDO QUE IREMOS UTILIZAR É O:
		--> GIT CONFIG --LIST

// ESSE COMANDO IRÁ NOS APRESENTAR AS CONFIGURAÇÕES BÁSICAS DO GIT. ALGUMAS DESSAS CONFIGURAÇÕES IREMOS NOS UTILIZAR.

// E PARA FAZER A IDENTIFICAÇÃO NO GIT VAMOS COMANDAR AS CONFIGURAÇÕES DE NOME E E-MAIL.
		--> GIT CONFIG --GLOBAL USER.NAME. 'nome'
		--> GIT CONFIG --GLOBAL USER.EMAIL 'seu_email@exemplo.com'

// PARA FAZER A CONFIRMAÇÃO DE QUE AS CONFIGURAÇÕES FORAM MODIFICADAS, PODEMOS COMANDAR:
		--> GIT CONFIG USER.NAME
===========================================================================================
===========================================================================================
--- GERÊNCIA DE CONFIGURAÇÃO DE SOFTWARE ---

	DURANTE O DESENVOLVIMENTO DO SOFTWARE, SEMPRE APARECERÁ ALGUMAS PERGUNTAS QUANDO AS MUDANÇAS FORAM FEITAS. OS SOFTWARES IRÃO SOFRER VÁRIAS ALTERAÇÕES E SABER O QUE FOI MUDANDO, QUANDO FOI MUDADO, PORQUE FOI MUDADO, QUEM FEZ A MUDANÇA E SE ESSA MUDANÇA PODE SER REPRODUZIDA SÃO DÚVIAS E/OU INFORMAÇÕES MUITAS VEZES NECESSÁRIAS PARA A CONTINUAÇÃO DO DESENVOLVIMENTO DO SOFTWARE.

	EXISTEM 4 IMPORTANTES TÓPICOS SOBRE A GERÊNCIA DE CONFIGURAÇÃO DE SOFTWARE QUE MERECEM UMA ATENÇÃO ESPECIAL, SÃO ELES:
	-> IDENTIFICAÇÃO
	-> DOCUMENTAÇÃO
	-> CONTROLE
	-> AUDITORIA

	DURANTE O DESENVOLVIMENTO DE SOFTWARE, O ARTEFATO É PRODUZIDO. E A GERÊNCIA DE CONFIGURAÇÃO DE SOFTWARE DEVE SER APLICADA SOBRE O ARTEFATO. O ARTEFATO É UMA COMPISIÇÃO DESTES TRÊS PRINCIPAIS ITENS:
	-> CÓDIGO FONTE
	-> DOCUMENTAÇÃO DO SOFTWARE
	-> MANUAL DO USUÁRIO


===========================================================================================
===========================================================================================

// MEU FOCO AQUI É ABORDAR UMA ROTINA EMPRESARIAL, POR ISSO EU IREI COMEÇAR ME BASEANDO EM UMA REALIDADE QUE EU TIVE. QUANDO VOCÊ ESTÁ ENTRANDO NA EMPRESA PELA PRIMEIRA VEZ E TOTALMENTE SEM EXPERIÊNCIA.

// ENTÃO AQUI, AO INVÉS DE NÓS COMEÇARMOS COM O GIT INIT E TODO AQUELE PASSO A PASSO "PRÉ-PUSH" (TODO O PROCESSO DE INIT, ADD, COMMIT.... ATÉ O PUSH) VOU COMEÇAR ME BASEANDO NO GITHUB (PORQUE EU CONSIDERO UM IMPORTANTE LOCAL ONDE NOVAS PESSOAS POSSAM MOSTRAR O SEU CONHECIMENTO PARA AS EMPRESAS E AS PESSOAS QUE OBSERVAM AS EVOLUÇÕES DE NOVAS PESSOAS). ENTÃO, MESMO QUE NÃO MUITO UTILIZADO (NA EXPERIÊNCIA QUE EU TENHO) VOU COMEÇAR COM O FORK, MAS IREI REFORÇAR QUE TALVEZ O ESTUDANTE IRÁ COMEÇAR PELO CLONE.

// VAMOS FAZER UM FORK DO PROJETO QUE EU ESTOU ME UTILIZANDO PARA BUSCAR CONHECIMENTO E INFORMAÇÕES PARA ESSE CURSO. O LINK É: https://github.com/Under0Cover/curso_git_oliver

// NESTE CASO, Under0Cover É O MEU USUÁRIO E curso_git_oliver É O NOME DO REPOSITÓRIO.

// APÓS A SOLICITAÇÃO DO FORK, O USUÁRIO SERÁ MODIFICADO PARA A PESSOA QUE ESTÁ FAZENDO O FORK (O SEU USUÁRIO) E AGORA ESTAMOS PRONTOS PARA FAZER O CLONE DO REPOSITÓRIO.

// NO TERMINAL DO GIT IREMOS DAR O SEGUINTE COMANDO:
		-->	GIT CLONE https://github.com/SEU_USUARIO/curso_git_oliver

// FEITO ISSO VOCÊ TERÁ UM CLONE DO REPOSITÓRIO GIT E PODERÁ FAZER AS SUAS MODIFICAÇÕES.

===========================================================================================
===========================================================================================

// AGORA, VOU MODIFICAR A SEQUÊNCIA DOS COMANDOS E VOLTAR AO INÍCIO PARA COMEÇAR COM O INIT. POIS A FORMA QUE OS PARTICIPANTES IRÃO MOSTRAR QUE CONSEGUIRAM RECEBER OS ENSINAMENTOS É TER A SUA PRÓPRIA BRANCH CRIADA NO GITHUB COM O PROJETO PROPOSTO DO CURSO FINALIZADO.

// VAMOS INICIAR UM PROJETO NOVO NO GIT, NOS UTILIZANDO DO INIT. ESSE COMANDO IRÁ CRIAR UM REPOSITÓRIO NOVO NO GIT. 
		--> GIT INIT

// O RETORNO ESPERADO É A MENSAGEM DIZENDO QUE FOI INICIALIZADO UM PROJETO VAZIO NO GIT

// FEITO ISSO, NOS VAMOS ADICIONAR OS ARQUIVOS E PASTAS QUE IRÃO COMPOR O NOSSO PROJETO.

// DEPOIS DE ADICIONARMOS OS ARQUIVOS, VAMOS UTILIZAR O COMANDO STATUS. ESSE COMANDO NOS PERMITE SABER QUAL É O ATUAL STATUS DO NOSSO REPOSITÓRIO.
		--> GIT STATUS

// O RETORNO SERÁ DIFERENTE DE ACORDO COM O STATUS DO REPOSITÓRIO. NESTE MOMENTO, COMO ACABAMOS DE COMEÇAR OS ARQUIVOS, O STATUS SERÁ DE ARQUIVOS NÃO TRACKEADOS.

// OS STATUS DOS ARQUIVOS SÃO DEFINIDOS EM TRÊS:
		--> LOCAL/MODIFICADO: É TODO ARQUIVO QUE FOI ADICIONADO/REMOVIDO/ADICIONADO. PORÉM ESTES ARQUIVOS NÃO ESTÃO NO PRÓXIMO COMMIT. A VERSÃO LOCAL ESTÁ DIFERENTE DA VERSÃO DO GIT.
		--> STAGED: APÓS COMANDAR 'GIT ADD', VOCÊ ESTÁ PREPARANDO OS ARQUIVOS PARA SEREM COMMITADOS. O GIT RECONHECE QUE O ARQUIVO FOI MODIFICADO.
		--> COMMITED: COM TODOS OS ARQUIVOS PREPARADOS, OU SEJA, EM STAGED, VAMOS UTILIZAR DE OUTRO COMANDO 'GIT COMMIT' (QUE VEREMOS DETALHADAMENTE MAIS PRA FRENTE) PARA PODERMOS REALIZAR O COMMIT DAS ALTERAÇÕES, TRANSFORMANDO AGORA O NOSSO COMMIT EM UMA NOVA VERSÃO DO NOSSO CÓDIGO. CASO HAJA OUTROS ARQUIVOS MODIFICADOS, MAS QUE NÃO FORAM COLOCADOS EM STAGED, ELES NÃO SERAM COMMITADOS.

********************* EXEMPLO: VOCÊ ESTÁ FAZENDO MODIFICAÇÕES NO FRONT-END, POIS UM CLIENTE GOSTARIA DE TROCAR ALGUNS AJUSTES NO CSS. MAS, AO ACASO, VOCÊ VAI PRECISAR DEBUGAR O BACK-END, POIS UM OUTRO CLIENTE REPORTOU UM BUG. VOCÊ NÃO QUER PERDER AS SUAS ALTERAÇÕES NO FRONT, POIS VAI TE CUSTAR MAIS TEMPO E VOCÊ AINDA NÃO TERMINOU. VOCÊ PODE FAZER AS ALTERAÇÕES NECESSÁRIAS PARA CORRIGIR O BUG DO CLIENTE E, NA HORA DE COLOCAR OS ARQUIVOS PRO STAGED, VOCÊ DEIXA DE FORA OS ARQUIVOS DO FRONT-END.

===========================================================================================
===========================================================================================
--- FIRST COMMIT

// COM OS ARQUIVOS EM STAGED, O PRÓXIMO PASSO É O COMMIT. PARA ISSO IREMOS COMANDAR:
		--> GIT COMMIT -M 'message'

// O RETORNO É A CONFIRMAÇÃO DO ARQUIVO EM COMMIT. A PARTIR DESSE MOMENTO, O SEU CÓDIGO ESTÁ VERSIONADO PELO GIT. E INFORMAÇÕES COMO AUTOR, DATA, HORA, ARQUIVOS MODIFICADOS E QUAIS AS MODIFICAÇÕES FORAM FEITAS, ESTÃO REGISTRADAS NO GIT. É NESSE MOMENTO QUE O GIT 'TIRA UM XEROX' DO SEU CÓDIGO.

===========================================================================================
===========================================================================================

REFERÊNCIAS:
- https://git-scm.com/
- https://www.digitalocean.com/community/tutorials/como-criar-um-pull-request-no-github-pt
- https://medium.com/@devmasterteam/git-ebook-8808f7301054
- https://gitfichas.com
- https://blog.rocketseat.com.br/iniciando-com-git-github/
- https://pt.education-wiki.com/1972852-git-life-cycle
- https://dev.to/eduardoopv/3-estados-dos-arquivos-git-e-github-3ee6
- https://www.digitalocean.com/community/tutorials/como-criar-um-pull-request-no-github-pt
- https://blog.rocketseat.com.br/iniciando-com-git-github/
- https://www.hostinger.com.br/tutoriais/tutorial-do-git-basics-introducao?ppc_campaign=google_performance_max&gclid=Cj0KCQiAjc2QBhDgARIsAMc3SqT1RnE-jksit07eHzrb073nZ4jI47tDXpDhoiNyfla3l6DxKXm3AukaAvygEALw_wcB
- https://www.carloseduardonogueira.dev/controle-versao/estagios-arquivo-no-git/
- https://www.carloseduardonogueira.dev/controle-versao/como-git-controla-versao-parte-2/index.html